name: Auto Merge main into Branch-B

on:
  push:
    branches:
      - main  # 触发该工作流，当main分支发生推送时

permissions:
  contents: write  # 允许写入仓库内容
  issues: write    # 允许创建和修改GitHub Issues

jobs:
  merge-and-notify:
    runs-on: ubuntu-latest  # 使用最新的Ubuntu运行环境

    steps:
    # 1. 检出仓库代码
    - name: Checkout the repository
      uses: actions/checkout@v4

    # 2. 配置Git用户信息
      run: |
        git config user.name "Github-CI-rotbot"
        git config user.email "dipengxu@163.com"

    # 3. 拉取所有分支
    - name: Fetch all branches
      run: git fetch --all

    # 4. 切换到Branch-B
    - name: Checkout Branch-B
      run: git checkout Branch-B

    # 5. 强制拉取最新的 main 分支，确保没有历史差异
    - name: Pull the latest main to sync with Branch-B
      run: |
        git pull origin main --no-rebase --allow-unrelated-histories

    # 6. 合并 main 到 Branch-B
    - name: Merge main into Branch-B
      id: merge
      run: |
        {
          if git merge origin/main --allow-unrelated-histories -m "Auto-merge main into Branch-B"; then
            echo "MERGE_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "MERGE_SUCCESS=false" >> $GITHUB_ENV
          fi
        } 2>&1 | tee merge_log.txt

    # 7. 如果合并成功，推送更新到Branch-B
    - name: Push changes if merge succeeded
      if: env.MERGE_SUCCESS == 'true'
      run: |
        git add .
        git commit -m "Auto-merge main into Branch-B"
        git push origin Branch-B

    # 8. 读取合并日志（用于错误报告）
    - name: Read merge log
      id: readlog
      run: |
        echo "LOG_CONTENT<<EOF" >> $GITHUB_ENV
        cat merge_log.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # 9. 如果合并失败，创建 GitHub Issue 来报告失败
    - name: Create GitHub Issue on Merge Failure
      if: env.MERGE_SUCCESS == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const mergeLog = `${{ env.LOG_CONTENT }}`;
          const conflictFiles = mergeLog.includes('CONFLICT') ? '存在冲突文件: app/src/main/java/com/apollo/timeflow/theme/Color.kt' : '未检测到冲突文件';
          
          const { data: issue } = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "⚠️ main 自动合并 Branch-B 失败了",
            body: `
              自动合并 main 到 Branch-B 失败了，请手动处理冲突！

              合并日志：
              ----------------
              ${mergeLog}

              需要解决的冲突：
              ----------------
              ${conflictFiles}
            `,
            labels: ["merge-failed"]
          });
